{|T| (list: T*) -> (:T+)
 #recursive =>
  [] #as[T+] $list fold: {
    (acc: T+, item: T/T*) -> 
    (:T+) =>

    $item #match: {
      :T+ => dup,
      :T  => wrap,
      _   => #this
    }
    $acc swap addAll
  }
} ~> flattenFP

{|T| (list: T*) -> (:T)
 #recursive =>

 [] ~> flattened: T+
 $list #ForEach: {
  #match: {
   lst: T+ => $lst,
   scl: T  => [$scl],
        _  => #this
  }
  $flattened: addAll
 }
 $flattened
} ~> flattenedImperative