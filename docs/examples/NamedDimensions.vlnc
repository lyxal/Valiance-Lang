#import dimensions

{(arr: Number@[row, column]) =>
  $arr dimensions.map: {$arr.column} {sum}
} ~> sumColumns

{(arr: Number@[row, column]) =>
  $arr dimensions.fold: {$arr.column} {+}
  fork: sum length ÷
} ~> flatAverage
1 20 range @(3, 4) reshape ~> testArr

$testArr `sumColumns` println
$testArr `flatAverage` println

## in dimensions.vlnc

#import pluginLib

#define map: {|T, U| (
  arr: T+{$n},
  over: 𝔽[ -> dim: dimensions.Dimension],
  fn: 𝔽[T+{$m} -> U]
) -> (:U+{$x})
#where: {
  $n length 1 - ~> m
  $x $dim - -> ~> x
} =>
  pluginLib.useDef: {"std/dimensions/map.py"}
}