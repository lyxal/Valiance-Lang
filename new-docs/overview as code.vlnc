#import inputPrompt from stdin
#import isPrime from math
#import NEWLINE, PI from constants

"What is your name?" println
stdin ::= name

"Hello, " name + println
$"Hello {$name}" println

{(:String) -> (Number?) =>
    all: {isDigit?} ?: {parseInt} {#None}
} ::= parseNumber

#None while: {(arg: Number?) -> (Number?) => $arg isNone? |
    "Please enter a number" inputPrompt $parseNumber()
}

$"Double your number is {2*}" println

[1, 2, 3] #typeOf ## Number+
[[1,2,3],[4,5,6],[7,8,9]] #typeOf ## Number++
[1, [2,3,4], 5] #typeOf ## Number~
[[1,2,3],[4,5,[6]]] #typeOf ## Number~~

[1,2,3] #assert: #matchesType[Number+]   ## Satifies Number+
[1,2,3] #assert: #matchesType[Number~]   ## Satifies Number~
[1,2,3] #assert: #matchesType[Number<3>] ## Exactly 3 items
[1,2,3] #assert: #matchesType[Number(3)] ## At least 3 items
[[1,2],[3,4]] #assert: #matchesType[Number++]
[[1,2],[3,4]] #assert: #matchesType[Number<2,2>]
[[1,2],[3,4]] #assert: #matchesType[Number(2)]
[[1,2],[3,4]] #assert: #matchesType[Number(2,1)]
[[1,2],[3,4]] #assert: #matchesType[Number<_,_>] ## Same as Number++
[[1,2],[3,4]] #assert: #matchesType[Number<2,_>] ## 2 by whatever

1 100 range filter: isPrime NEWLINE join-on println
[1, 2, 3, 4, 5] map: {range sum} println

[[1,2,3],[4,5,6],[7,8,9]] shape println ## [3, 3]
[1, 2, 3, 4, 5, 6, 7, 8,9] shape println ## [9]
[1, [2, 3, 4], 5] shape println ## [3]
[[1,2,3],[4,5,[6]]] shape println ## [2,3]
[[1,2,3],[4,5]] shape println ## [2,3]

#object Point: {(Number, Number) =>
    ::= x
    ::= y
}

#define toString: {(point: Point) -> (String) => $"({$point.x}, {$point.y})"}

#trait Shape: {
    #::= points: Point+
    0 ::= sides
    #define .getArea: 𝔽[; Number]
    #define .getPoints: {() -> (Point+) => $points}
}

#object Square: {(Point<2>) =>
    ::= points
    4 ::= sides

    #define .getArea: {() -> (Number) =>
        $points map: {$.x} reduce: absDiff square
    }
}

#object Circle: {(Point, Number) =>
    ::= radius
    ::= center
    1 ::= sides ## Loosely speaking

    #define .getArea: {() -> (Number) =>
        $radius PI * square
    }
}

## Arity-dependent function
#define fork: {(f: 𝔽, g: 𝔽, {f ^ g}) -> ({f + g}) =>
    peek: $f!() $g!() ## !() pushes the result(s) of the function to the return stack
}

3 4 fork: + * pair println ## [7, 12]
## OR
3 4 {(Number, Number) -> (Number) => +} {(Number, Number) -> (Number) => *} fork println ## [7, 12]

{<T>(T~) -> (T+) => flatten} ::= flatten
{<T, U>(T+, U+) -> ((T|U)+<2>) => both: head} ::= firsts

[[1,2],[3,4],[5,6]] flatten println ## [1, 2, 3, 4, 5, 6]
[1,2,3] ["a", "b", "c"] firsts println ## [1, "a"]

## Fibonacci as a while loop
{(nth :Number) -> (Number) =>
    @(0, 1, 0)
    while: {@(a: Number, b: Number, counter: Number) => $counter $nth < |
        @($b, $a $b +, $counter ++)
    }
    tail
} ::= fib

## The above utilises a tuple to maintain state in the while loop
## Rather than normal arguments, the tuple is destructured each iteration

@(1, 2, 3) ## Tuple of 3 numbers
1 2 3 tuple3 ## Same tuple, but formed from stack values

20 2 % #match: {
    0 => "Even",
    _ => "Odd"
}

20 #match: {
    2 % 0 == => "Even",
    _ => Odd
}

[1, 2, 3] #match: {
    [1, 2, 3] => "Matched",
    _ => "Not matched"
}

[1, 2, 3] #match: {
    (1, _, 3) => "Matched",
    (_, 2, _) => "Sort of matched",
    _ => "Not matched"
}

[1, 2, 3, 4] #match: {
    (_, 4) => "Matched",
    _ => "Not matched"
} ## Prints "Matched", because the `_` matches the [1, 2, 3]