#import std.Traits.Comparable

{ <T[Comparable]>(haystack: T+, needle: T, $: Number?) =>
  ## Performs a binary search on a list of items of a type that implements `Comparable`
  ## Returns the index of the needle if present, `None` otherwise

  @(0, $haystack length, None) ## Construct the initial state
  while: {@(low: Number, high: Number, res: Number?) =>
    $haystack   $low $high +½ floor   peek: ▯ ## Get the middle item, leaving the middle index on the stack
    $needle compare
    #match: { ## Depending on the comparison result, either set the new high, low, or result based on the middle index
      1  => [↳1+, $high, None] | ## ↳ copies ("yoinks") the top of the outer stack into the function scope
      -1 => [$low, ↳1-, None]  |
         => [$low, $high, ↳]
     } fuse-from ## Convert the result of the match to a Fusion[Number, Number, Number?] for next loop iteration
  } ## Will return the aforementioned Fusion[Number, Number, Number?]
  ## However, the `Number?` needs to be extracted
  last
} :=binarySearch ## Has type Function<T[Comparable]>[T+, T; Number?]

10 indices =haystack ## Range [0, 9]

$haystack 5 `binarySearch` println  ## Prints "6"
$haystack 20 `binarySearch` println ## Prints "None"
